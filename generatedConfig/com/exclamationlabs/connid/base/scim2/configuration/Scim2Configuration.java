package com.exclamationlabs.connid.base.scim2.configuration;

import com.exclamationlabs.connid.base.connector.configuration.ConnectorConfiguration;
import com.exclamationlabs.connid.base.connector.configuration.ConfigurationInfo;
import com.exclamationlabs.connid.base.connector.configuration.ConfigurationReader;
import org.identityconnectors.framework.common.objects.ConnectorMessages;
import org.identityconnectors.framework.spi.ConfigurationClass;
import org.identityconnectors.framework.spi.ConfigurationProperty;
import javax.validation.constraints.*;
import java.util.*;

import com.exclamationlabs.connid.base.connector.configuration.basetypes.RestConfiguration;
import com.exclamationlabs.connid.base.connector.configuration.basetypes.ResultsConfiguration;
import com.exclamationlabs.connid.base.connector.configuration.basetypes.ServiceConfiguration;
import com.exclamationlabs.connid.base.connector.configuration.basetypes.security.ProxyConfiguration;
import com.exclamationlabs.connid.base.connector.configuration.basetypes.security.authenticator.DirectAccessTokenConfiguration;

/**
* This class was automatically generated by connector-base-config-plugin.
* It is not ideal to modify this file, as subsequent builds of this project will overlay
* your changes in this file.  Instead, modify the configuration.structure.yml in this project.
*/
@ConfigurationClass(skipUnsupported = true, ignore={"active", "name", "source", "currentToken"})
public class Scim2Configuration implements ConnectorConfiguration, RestConfiguration, ResultsConfiguration, ServiceConfiguration, ProxyConfiguration, DirectAccessTokenConfiguration {

    protected ConnectorMessages connectorMessages;

    @ConfigurationInfo(path="source", internal=true)
    protected String source;

    @ConfigurationInfo(path="name", internal=true)
    protected String name;

    @ConfigurationInfo(path="active", internal=true)
    protected Boolean active;

    @ConfigurationInfo(path="currentToken", internal=true)
    protected String currentToken;

    @ConfigurationInfo(path="results.deepGet")
    private Boolean deepGet;

    @ConfigurationInfo(path="custom.userSchemaIdList")
    private String[] userSchemaIdList;

    @ConfigurationInfo(path="results.pagination")
    private Boolean pagination;

    @NotNull(message="enableDynamicSchema cannot be null")
    @ConfigurationInfo(path="custom.enableDynamicSchema")
    private Boolean enableDynamicSchema = false;

    @NotBlank(message="groupsEndpointUrl cannot be blank")
    @ConfigurationInfo(path="custom.groupsEndpointUrl")
    private String groupsEndpointUrl;

    @NotBlank(message="serviceUrl cannot be blank")
    @ConfigurationInfo(path="service.serviceUrl")
    private String serviceUrl;

    @Pattern(regexp = "socks5|http", flags = Pattern.Flag.CASE_INSENSITIVE)
    @NotBlank(message="proxyType cannot be blank")
    @ConfigurationInfo(path="security.proxy.proxyType")
    private String proxyType;

    @NotNull(message="importBatchSize cannot be null")
    @ConfigurationInfo(path="results.importBatchSize")
    private Integer importBatchSize = 50;

    @ConfigurationInfo(path="custom.groupSchemaIdList")
    private String[] groupSchemaIdList;

    @NotBlank(message="usersEndpointUrl cannot be blank")
    @ConfigurationInfo(path="custom.usersEndpointUrl")
    private String usersEndpointUrl;

    @NotNull(message="enableStandardSchema cannot be null")
    @ConfigurationInfo(path="custom.enableStandardSchema")
    private Boolean enableStandardSchema = false;

    @NotBlank(message="proxyHost cannot be blank")
    @ConfigurationInfo(path="security.proxy.proxyHost")
    private String proxyHost;

    @NotBlank(message="token cannot be blank")
    @ConfigurationInfo(path="security.authenticator.directAccessToken.token")
    private String token;

    @NotNull(message="enableAWSSchema cannot be null")
    @ConfigurationInfo(path="custom.enableAWSSchema")
    private Boolean enableAWSSchema = false;

    @NotNull(message="enableSlackSchema cannot be null")
    @ConfigurationInfo(path="custom.enableSlackSchema")
    private Boolean enableSlackSchema = false;

    @NotNull(message="proxyPort cannot be null")
    @ConfigurationInfo(path="security.proxy.proxyPort")
    private Integer proxyPort;

    @ConfigurationInfo(path="service.duplicateErrorReturnsId")
    private Boolean duplicateErrorReturnsId = false;

    @Min(1)
    @Max(100)
    @ConfigurationInfo(path="rest.ioErrorRetries")
    private Integer ioErrorRetries = 5;

    @ConfigurationInfo(path="results.deepImport")
    private Boolean deepImport;

    @NotNull(message="enableEnterpriseUser cannot be null")
    @ConfigurationInfo(path="custom.enableEnterpriseUser")
    private Boolean enableEnterpriseUser = false;


    public Scim2Configuration() {
        source = "default";
        name = "default";
        active = true;
    }

    public Scim2Configuration(String configurationName) {
        name = configurationName;
        active = true;
        ConfigurationReader.prepareTestConfiguration(this);
    }

    @ConfigurationProperty(
    displayMessageKey = "Deep Get Enabled",
    helpMessageKey = "If true, an individual getOne request for each item in any getAll request will be performed.",
    order = 1101,
    confidential = false,
    required = false)
    public Boolean getDeepGet() {
        return this.deepGet;
    }

    public void setDeepGet(Boolean input) {
        this.deepGet = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "User SchemaId List",
    helpMessageKey = "A list of user schemas that define a user. This is discoverable from the Resource Type URL, JSON, or by one of the prebuilt java classes",
    order = 3100,
    confidential = false,
    required = false)
    public String[] getUserSchemaIdList() {
        return this.userSchemaIdList;
    }

    public void setUserSchemaIdList(String[] input) {
        this.userSchemaIdList = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Pagination Enabled",
    helpMessageKey = "Set to true if this connector (and its underlying API) supports pagination.",
    order = 1104,
    confidential = false,
    required = false)
    public Boolean getPagination() {
        return this.pagination;
    }

    public void setPagination(Boolean input) {
        this.pagination = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Enable Dynamic Schema",
    helpMessageKey = "Use the Resource Type and/or the Schema defined ",
    order = 3050,
    confidential = false,
    required = true)
    public Boolean getEnableDynamicSchema() {
        return this.enableDynamicSchema;
    }

    public void setEnableDynamicSchema(Boolean input) {
        this.enableDynamicSchema = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Groups Endpoint URL",
    helpMessageKey = "Discovered from the resource type or entered manually",
    order = 3070,
    confidential = false,
    required = true)
    public String getGroupsEndpointUrl() {
        return this.groupsEndpointUrl;
    }

    public void setGroupsEndpointUrl(String input) {
        this.groupsEndpointUrl = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Service URL",
    helpMessageKey = "The base service URL for the API this connector needs to access to get or store data.",
    order = 1201,
    confidential = false,
    required = true)
    public String getServiceUrl() {
        return this.serviceUrl;
    }

    public void setServiceUrl(String input) {
        this.serviceUrl = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Proxy Type",
    helpMessageKey = "Type of Proxy Server - either `socks5` or `http`",
    order = 2403,
    confidential = false,
    required = true)
    public String getProxyType() {
        return this.proxyType;
    }

    public void setProxyType(String input) {
        this.proxyType = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Import Batch Size",
    helpMessageKey = "If supplied, import operations will be invoked using this given batch size, so that API`s that support paging can import all records using a particular batch size (instead  of all at once.",
    order = 1103,
    confidential = false,
    required = true)
    public Integer getImportBatchSize() {
        return this.importBatchSize;
    }

    public void setImportBatchSize(Integer input) {
        this.importBatchSize = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Group SchemaId List",
    helpMessageKey = "A list of Group schemas that define a Group. This is discoverable from the Resource Type URL or JSON. or by one of the prebuilt java classes ",
    order = 3200,
    confidential = false,
    required = false)
    public String[] getGroupSchemaIdList() {
        return this.groupSchemaIdList;
    }

    public void setGroupSchemaIdList(String[] input) {
        this.groupSchemaIdList = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Users Endpoint URL",
    helpMessageKey = "Discovered from the resource type or entered manually",
    order = 3060,
    confidential = false,
    required = true)
    public String getUsersEndpointUrl() {
        return this.usersEndpointUrl;
    }

    public void setUsersEndpointUrl(String input) {
        this.usersEndpointUrl = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Enable Standard Schema",
    helpMessageKey = "Uses prebuilt java objects based on the stand schema. ",
    order = 3010,
    confidential = false,
    required = true)
    public Boolean getEnableStandardSchema() {
        return this.enableStandardSchema;
    }

    public void setEnableStandardSchema(Boolean input) {
        this.enableStandardSchema = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Proxy Host",
    helpMessageKey = "Domain or IP Address of Proxy Server",
    order = 2401,
    confidential = false,
    required = true)
    public String getProxyHost() {
        return this.proxyHost;
    }

    public void setProxyHost(String input) {
        this.proxyHost = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Token",
    helpMessageKey = "Fixed token value providing access to the connector",
    order = 2501,
    confidential = true,
    required = true)
    public String getToken() {
        return this.token;
    }

    public void setToken(String input) {
        this.token = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Enable AWS Schema",
    helpMessageKey = "Use a pre-built java objects as defined for AWS As specified here https://docs.aws.amazon.com/singlesignon/latest/developerguide/what-is-scim.html",
    order = 3030,
    confidential = false,
    required = true)
    public Boolean getEnableAWSSchema() {
        return this.enableAWSSchema;
    }

    public void setEnableAWSSchema(Boolean input) {
        this.enableAWSSchema = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Enable Slack Schema",
    helpMessageKey = "Use prebuilt java classes as define for Slack as specified here: https://api.slack.com/admins/scim2",
    order = 3040,
    confidential = false,
    required = true)
    public Boolean getEnableSlackSchema() {
        return this.enableSlackSchema;
    }

    public void setEnableSlackSchema(Boolean input) {
        this.enableSlackSchema = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Proxy Port",
    helpMessageKey = "Port Number of Proxy Server",
    order = 2402,
    confidential = false,
    required = true)
    public Integer getProxyPort() {
        return this.proxyPort;
    }

    public void setProxyPort(Integer input) {
        this.proxyPort = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Duplicate Error Returns Id",
    helpMessageKey = "When a create is attempted and an AlreadyExistsException is generated by the driver/invocator, the adapter shall attempt to call getOneByName() driver/invocator method to return the id of the existing record matching the current name value.",
    order = 1202,
    confidential = false,
    required = false)
    public Boolean getDuplicateErrorReturnsId() {
        return this.duplicateErrorReturnsId;
    }

    public void setDuplicateErrorReturnsId(Boolean input) {
        this.duplicateErrorReturnsId = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "IO Error Retries",
    helpMessageKey = "If IO Error occurs during API invocation, this number of retries will be attempted before giving up",
    order = 1001,
    confidential = false,
    required = false)
    public Integer getIoErrorRetries() {
        return this.ioErrorRetries;
    }

    public void setIoErrorRetries(Integer input) {
        this.ioErrorRetries = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Deep Import Enabled",
    helpMessageKey = "If true, an individual getOne request for each item in Import getAll requests will be performed.",
    order = 1102,
    confidential = false,
    required = false)
    public Boolean getDeepImport() {
        return this.deepImport;
    }

    public void setDeepImport(Boolean input) {
        this.deepImport = input;
    }

    @ConfigurationProperty(
    displayMessageKey = "Enable Enterprise User",
    helpMessageKey = "Extend the user schema with enterprise attributes ",
    order = 3020,
    confidential = false,
    required = true)
    public Boolean getEnableEnterpriseUser() {
        return this.enableEnterpriseUser;
    }

    public void setEnableEnterpriseUser(Boolean input) {
        this.enableEnterpriseUser = input;
    }


    @Override
    public ConnectorMessages getConnectorMessages() {
        return connectorMessages;
    }

    @Override
    public void setConnectorMessages(ConnectorMessages messages) {
        connectorMessages = messages;
    }

    @Override
    public String getCurrentToken() {
        return currentToken;
    }

    @Override
    public void setCurrentToken(String input) {
        currentToken = input;
    }

    @Override
    public String getSource() {
        return source;
    }

    @Override
    public void setSource(String input) {
        source = input;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public void setName(String input) {
        name = input;
    }

    @Override
    public Boolean getActive() {
        return active;
    }

    @Override
    public void setActive(Boolean input) {
        active = input;
    }


}